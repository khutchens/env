
colorscheme kyle

" general behavior
set backspace=2     " make backspace work like most other apps
set number          " turn line numbers on
set foldcolumn=1    " turn on fold column
set hlsearch        " highlight search results so they're easier to find
set laststatus=2    " always show status line
set noerrorbells    " annoying noises
set novisualbell    " annoying flashes
set ruler           " show row/column and % info in status bar
set tabstop=4       " tab are 4 spaces wide. this is for cases without expanded tabs
syntax enable       " enable syntax highlighting by default
set wildmode=longest,list
set scrolloff=10    " scroll before cursor reaches edge of screen
set autowrite       " automatically write changes to file

" set indent behavior
set expandtab
set shiftwidth=4
set softtabstop=4

" handle tabs correctly for makefiles
au BufNewFile,BufRead makefile,Makefile,*.mk  setlocal noexpandtab shiftwidth=4 softtabstop=4

" disable statusline for fzf windows
autocmd FileType fzf set laststatus=0 noshowmode noruler
  \| autocmd BufLeave <buffer> set laststatus=2 showmode ruler

" leader, obviously
let mapleader=","

" easier buffer navigation
nnoremap <Tab> :bnext<CR>
nnoremap <S-Tab> :bprevious<CR>
nnoremap <leader>q :bdelete<CR>
nnoremap <leader>wq :w<CR>:bdelete<CR>

" use <space> to clear hilight after searching
nnoremap <silent> <Space> :<C-U>noh<CR>:cclose<CR>

" remap :tag to :tjump, which prompts for selection when duplicate tags exist
nnoremap <C-]> g<C-]>

" python highlighting options
let python_highlight_all = 1

" fzf
nnoremap <silent> <leader>fe :call fzf#run({'down': '30%', 'sink': 'edit'})<CR>
nnoremap <silent> <leader>fb :call fzf#run({'down': '30%', 'source': Bufs(), 'sink': 'buffer', 'options': '--no-multi'})<CR>
nnoremap <silent> <leader>fq :call fzf#run({'down': '30%', 'source': Bufs(), 'sink': 'bdelete'})<CR>

nnoremap <silent> <leader>ft :call fzf#run({'down': '30%', 'sink*': funcref('Tagfiles'), 'options': '--query=tags'})<CR>
nnoremap <silent> <leader>fy :call fzf#run({'down': '30%', 'source': Tags('', ''), 'sink*': funcref('Yank'), 'options': '--no-multi'})<CR>
nnoremap <silent> <leader>fs :call fzf#run({'down': '30%', 'source': Tags(expand("%"), ''), 'sink*': funcref('Search'), 'options': '--no-multi'})<CR>
nnoremap <silent> <leader>ff :call fzf#run({'down': '30%', 'source': Tags(expand("%"), 'f'), 'sink': 'tjump', 'options': '--no-multi'})<CR>
nnoremap <silent> <leader>fF :call fzf#run({'down': '30%', 'source': Tags('', 'f'), 'sink': 'tjump', 'options': '--no-multi'})<CR>
nnoremap <silent> <leader>fv :call fzf#run({'down': '30%', 'source': Tags(expand("%"), ''), 'sink': 'tjump', 'options': '--no-multi'})<CR>
nnoremap <silent> <leader>fV :call fzf#run({'down': '30%', 'source': Tags('', ''), 'sink': 'tjump', 'options': '--no-multi'})<CR>

function Tagfiles(files)
    let l:files = []
    for l:file in a:files
        " shorten file names as much as possible while removing leading ./ since it confuses vim
        let l:files += [fnamemodify(l:file, ':~:.')]
    endfor

    execute('set tags=' . join(l:files, ","))
    execute('set tags notagrelative')
endfunction

function Tags(file, kind)
    let l:tags = taglist('.')

    " filter out unwanted files and types
    if a:kind != '' | call filter(l:tags, 'v:val.kind == a:kind') | endif
    if a:file != '' | call filter(l:tags, 'v:val.filename == fnamemodify(a:file, ":~:.")') | endif

    " fzf just wants names
    return map(l:tags, 'v:val.name')
endfunction

function Yank(strings)
    let @" = a:strings[0]
endfunction

function Search(strings)
    let @/ = '\<' . a:strings[0] . '\>'
    call feedkeys('n')
endfunction

function Bufs()
	" All buffer numbers.
    let l:bufs = range(1, bufnr('$'))

	" Only include visible buffers.
    call filter(l:bufs, 'buflisted(v:val)')

	" Swap out buffer numbers for names to make them more user-friendly.
	" Also strip leading ./ if it exists since it tends to break things.
    call map(l:bufs, 'fnamemodify(bufname(v:val), ":~:.")')

	return l:bufs
endfunction

