" don't set term type, just let vim get it from $TERM, which is more portable.
"set term=rxvt-color 

colorscheme kyle

let loaded_matchparen = 1

" general behavior
set backspace=2     " make backspace work like most other apps
set number          " turn line numbers on
set hlsearch        " highlight search results so they're easier to find
set laststatus=2    " always show status line
set noerrorbells    " annoying noises
set novisualbell    " annoying flashes
set ruler           " show row/column and % info in status bar
set tabstop=4       " tab are 4 spaces wide. this is for cases without expanded tabs
syntax enable       " enable syntax highlighting by default
set wildmode=longest,list
set scrolloff=10    " scroll before cursor reaches edge of screen
set showbreak=...   " prefix for wrapped lines

" set indent behavior
set expandtab
set shiftwidth=4
set softtabstop=4

" makes launch faster, and leaves vim buffer onscreen after exit
set t_ti= t_te=

" highlight modes for unusual file types
au BufNewFile,BufRead makefile  setlocal noexpandtab shiftwidth=4 softtabstop=4
au BufNewFile,BufRead Makefile  setlocal noexpandtab shiftwidth=4 softtabstop=4

" leader, obviously
let mapleader=","

" make window/frame resizing and navigation easier
map + <C-W>+
map - <C-W>-
nnoremap <C-J> <C-W><C-J>
nnoremap <C-K> <C-W><C-K>
nnoremap <C-H> gT
nnoremap <C-L> gt
set splitbelow

" use <space> to clear hilight after searching
nnoremap <silent> <Space> :<C-U>noh<CR>:cclose<CR>

" python highlighting options
let python_highlight_builtins           = 1
let python_highlight_builtin_objs       = 1
let python_highlight_builtin_funcs      = 1
let python_highlight_exceptions         = 1
let python_highlight_string_formatting  = 1
let python_highlight_indent_errors      = 1
let python_highlight_space_errors       = 1

" replace grep with ag
if executable('ag')
  " Use ag over grep
  set grepprg=ag\ --nogroup\ --nocolor\ --ignore\ build
endif

" use fzf in vim
nnoremap <silent> <leader>fe :call fzf#run({'sink': 'tabe'})<CR>
nnoremap <silent> <leader>ff :call fzf#run({'source': "sed '/^\\!/d;s/	.*//' tags", 'sink': 'tag'})<CR>
nnoremap <silent> <leader>ft :call FzfTagsfile()<CR>

function FzfTagsfile()
    let l:tags = ''
    silent! let l:files = fzf#run({'options': '--query=tags'})
    for l:file in l:files
        let l:tags = l:file . ','
    endfor
    execute('set tags=' . l:tags)
    execute('set tags')
endfunction

" easy open/close related header
nnoremap <silent> <leader>h :call HeaderToggle(bufname("%"))<CR>
function HeaderToggle(current_fname)
    if(a:current_fname =~ '\.c')
        let l:compliment_fname = substitute(a:current_fname, '\.c', '.h', '')
        let l:compliment_fname = substitute(l:compliment_fname, '/src/\(.*\.h\)', '/include/\1', '')
        let l:command = "top 25sp "
    elseif (a:current_fname =~ '\.h')
        let l:compliment_fname = substitute(a:current_fname, '\.h', '.c', '')
        let l:compliment_fname = substitute(l:compliment_fname, '/include/\(.*\.c\)', '/src/\1', '')
        let l:command = "bot 60sp "
    endif

    echo a:current_fname ' -> ' l:compliment_fname

    if(exists('l:compliment_fname'))
        if(bufwinnr(l:compliment_fname) < 0)
            exec l:command . l:compliment_fname
        else
            q
        endif
    endif
endfunction
