# This file is sourced for all bash instances, so put most configs here.
# vim: ft=sh

# If not running interactively, don't do anything. this fixes things like scp.
[[ -z "$PS1" ]] && return

# bash prompt
export PROMPT_DIRTRIM=2 # this will only work in bash 4.x, but OSX comes with bash 3.x by default.
if [[ -n "$SSH_CLIENT" || -n "$SSH_TTY" ]]; then
    HOST="\[\e[31m\]\u\e[33m@\e[31m\h "
else
    HOST=''
fi
export PS1="$HOST\[\e[34m\]\w\[\e[31m\] \$\[\e[0m\] "

# aliases
alias ll='ls -lh'
alias la='ll -as'
alias hg='history | grep'
alias fkill='ps -ef | sed 1d | fzf -m | awk "{print \$2}" | xargs kill -9'

# ENV
export EDITOR=vim
export GREP_OPTIONS='--color=auto'
export GREP_COLOR='31'
export PATH=~/bin:$PATH
export FZF_DEFAULT_OPTS='-m'
export PYTHONUNBUFFERED=1

# Use `bfs` instead of `find` for calls to `fzf`.
# This just searches breadth-first, which is usually more relevant
#   for finding a file I want to open.
if [ -x "$(command -v bfs)" ]; then
    export FZF_DEFAULT_COMMAND='bfs -type f -follow -maxdepth 10 2> /dev/null'
fi

# fzf
fe() {
    # fe - Open the selected files with the default editor
    local files=$(fzf --select-1 --exit-0 | sed -e "s/\(.*\)/\'\1\'/")
    local command="${EDITOR} $files"
    if [ -n "$files" ]; then
        eval $command
    fi
}

fd() {
    # fd - cd to selected directory
    local dir=$(find . -type d 2> /dev/null | fzf +m)
    if [ -n "$dir" ]; then
        cd "$dir"
    fi
}

fdu() {
    # fd - cd to selected directory
    local dir=$(lsup | fzf +m)
    if [ -n "$dir" ]; then
        cd "$dir"
    fi
}

fh() {
    # fh - repeat history
    local cmd=`history | fzf +s --tac | sed 's/ *[0-9]* *//'`
    if [ -n "$cmd" ]; then
        history -s $cmd
        eval $cmd
    fi
}

# extended bashrc's
BASHRC_OS=".bashrc_platform"
if [[ -f ~/$BASHRC_OS ]]; then
    source ~/$BASHRC_OS
fi

BASHRC_LOCAL=".bashrc_local"
if [[ -f ~/$BASHRC_LOCAL ]]; then
    source ~/$BASHRC_LOCAL
fi
